openapi: 3.0.0
paths:
  /user:
    get:
      operationId: UserController_getAllUsers
      parameters: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDto'
      summary: Get all users
      tags:
        - Users
    post:
      operationId: UserController_createUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid input (missing login or password)
      summary: Create a new user
      tags:
        - Users
  /user/{id}:
    get:
      operationId: UserController_getUserById
      parameters:
        - name: id
          required: true
          in: path
          description: User UUID
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid UUID format
        '404':
          description: User not found
      summary: Get a single user by ID
      tags:
        - Users
    put:
      operationId: UserController_updateUserPassword
      parameters:
        - name: id
          required: true
          in: path
          description: User UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: User password updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid UUID format or invalid input
        '404':
          description: User not found
        '403':
          description: Incorrect old password
      summary: Update user password
      tags:
        - Users
    delete:
      operationId: UserController_deleteUser
      parameters:
        - name: id
          required: true
          in: path
          description: User UUID
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Invalid UUID format
        '404':
          description: User not found
      summary: Delete a user
      tags:
        - Users
  /artist:
    get:
      operationId: ArtistsController_getAll
      parameters: []
      responses:
        '200':
          description: List of artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtistResponseDto'
      summary: Get all artists
      tags:
        - Artists
    post:
      operationId: ArtistsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: Artist created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponseDto'
        '400':
          description: Invalid input (missing name or grammy value)
      summary: Create a new artist
      tags:
        - Artists
  /artist/{id}:
    get:
      operationId: ArtistsController_getById
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      responses:
        '200':
          description: Artist found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponseDto'
        '400':
          description: Invalid UUID format
        '404':
          description: Artist not found
      summary: Get a single artist by ID
      tags:
        - Artists
    put:
      operationId: ArtistsController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: Artist updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponseDto'
        '400':
          description: Invalid UUID format or invalid input
        '404':
          description: Artist not found
      summary: Update artist information
      tags:
        - Artists
    delete:
      operationId: ArtistsController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      responses:
        '204':
          description: Artist deleted successfully
        '400':
          description: Invalid UUID format
        '404':
          description: Artist not found
      summary: Delete an artist
      tags:
        - Artists
  /album:
    get:
      operationId: AlbumController_getAll
      parameters: []
      responses:
        '200':
          description: List of albums
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumResponseDto'
      summary: Get all albums
      tags:
        - Albums
    post:
      operationId: AlbumController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: Album created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponseDto'
        '400':
          description: Invalid input (missing title or artistId)
      summary: Create a new album
      tags:
        - Albums
  /album/{id}:
    get:
      operationId: AlbumController_getById
      parameters:
        - name: id
          required: true
          in: path
          description: Album UUID
          schema:
            type: string
      responses:
        '200':
          description: Album found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponseDto'
        '400':
          description: Invalid UUID format
        '404':
          description: Album not found
      summary: Get a single album by ID
      tags:
        - Albums
    put:
      operationId: AlbumController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Album UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: Album updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponseDto'
        '400':
          description: Invalid UUID format or invalid input
        '404':
          description: Album not found
      summary: Update album information
      tags:
        - Albums
    delete:
      operationId: AlbumController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Album UUID
          schema:
            type: string
      responses:
        '204':
          description: Album deleted successfully
        '400':
          description: Invalid UUID format
        '404':
          description: Album not found
      summary: Delete an album
      tags:
        - Albums
  /track:
    get:
      operationId: TrackController_getAll
      responses:
        '200':
          description: List of tracks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackResponseDto'
      summary: Get all tracks
      tags:
        - Tracks
    post:
      operationId: TrackController_create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: Track created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponseDto'
        '400':
          description: Invalid input (missing required fields)
      summary: Create a new track
      tags:
        - Tracks
  /track/{id}:
    get:
      operationId: TrackController_getById
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            type: string
      responses:
        '200':
          description: Track found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponseDto'
        '400':
          description: Invalid UUID format
        '404':
          description: Track not found
      summary: Get a single track by ID
      tags:
        - Tracks
    put:
      operationId: TrackController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: Track updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponseDto'
        '400':
          description: Invalid UUID format or invalid input
        '404':
          description: Track not found
      summary: Update track information
      tags:
        - Tracks
    delete:
      operationId: TrackController_delete
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            type: string
      responses:
        '204':
          description: Track deleted successfully
        '400':
          description: Invalid UUID format
        '404':
          description: Track not found
      summary: Delete a track
      tags:
        - Tracks
  /favorites:
    get:
      operationId: FavoritesController_getAllFavorites
      parameters: []
      responses:
        '200':
          description: List of all favorite entities
          content:
            application/json:
              schema:
                type: object
                properties:
                  artists:
                    type: array
                    items:
                      $ref: '#/components/schemas/ArtistResponseDto'
                  albums:
                    type: array
                    items:
                      $ref: '#/components/schemas/AlbumResponseDto'
                  tracks:
                    type: array
                    items:
                      $ref: '#/components/schemas/TrackResponseDto'
      summary: Get all favorites
      tags:
        - Favorites
  /favorites/track/{id}:
    post:
      operationId: FavoritesController_addTrackToFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            type: string
      responses:
        '201':
          description: Track added to favorites
        '400':
          description: Invalid UUID format
        '422':
          description: Track not found
      summary: Add track to favorites
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeTrackFromFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            type: string
      responses:
        '204':
          description: Track removed from favorites
        '400':
          description: Invalid UUID format
        '404':
          description: Track not found in favorites
      summary: Remove track from favorites
      tags:
        - Favorites
  /favorites/album/{id}:
    post:
      operationId: FavoritesController_addAlbumToFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: Album UUID
          schema:
            type: string
      responses:
        '201':
          description: Album added to favorites
        '400':
          description: Invalid UUID format
        '422':
          description: Album not found
      summary: Add album to favorites
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeAlbumFromFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: Album UUID
          schema:
            type: string
      responses:
        '204':
          description: Album removed from favorites
        '400':
          description: Invalid UUID format
        '404':
          description: Album not found in favorites
      summary: Remove album from favorites
      tags:
        - Favorites
  /favorites/artist/{id}:
    post:
      operationId: FavoritesController_addArtistToFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      responses:
        '201':
          description: Artist added to favorites
        '400':
          description: Invalid UUID format
        '422':
          description: Artist not found
      summary: Add artist to favorites
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeArtistFromFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      responses:
        '204':
          description: Artist removed from favorites
        '400':
          description: Invalid UUID format
        '404':
          description: Artist not found in favorites
      summary: Remove artist from favorites
      tags:
        - Favorites
info:
  title: Home Library Service API
  description: API documentation for Home Library Service
components:
  schemas:
    CreateUserDto:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
        password:
          type: string
    UpdatePasswordDto:
      type: object
      required:
        - oldPassword
        - newPassword
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    UserResponseDto:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
        version:
          type: integer
        createdAt:
          type: integer
        updatedAt:
          type: integer
    CreateArtistDto:
      type: object
      required:
        - name
        - grammy
      properties:
        name:
          type: string
        grammy:
          type: boolean
    UpdateArtistDto:
      type: object
      required:
        - name
        - grammy
      properties:
        name:
          type: string
        grammy:
          type: boolean
    ArtistResponseDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        grammy:
          type: boolean
    CreateAlbumDto:
      type: object
      required:
        - name
        - year
        - artistId
      properties:
        name:
          type: string
        year:
          type: number
        artistId:
          type: string | null
    UpdateAlbumDto:
      type: object
      required:
        - name
        - year
        - artistId
      properties:
        name:
          type: string
        year:
          type: number
        artistId:
          type: string | null
    AlbumResponseDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        year:
          type: number
        artistId:
          type: string | null
    CreateTrackDto:
      type: object
      required:
        - name
        - duration
      properties:
        name:
          type: string
        artistId:
          type: string
          nullable: true
        albumId:
          type: string
          nullable: true
        duration:
          type: integer
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
        artistId:
          type: string
          nullable: true
        albumId:
          type: string
          nullable: true
        duration:
          type: integer
    TrackResponseDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        artistId:
          type: string
          nullable: true
        albumId:
          type: string
          nullable: true
        duration:
          type: integer
    AddFavoriteDto:
      type: object
      properties:
        id:
          type: string
    RemoveFavoriteDto:
      type: object
      properties:
        id:
          type: string
    FavoritesResponseDto:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/ArtistResponseDto'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/AlbumResponseDto'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/TrackResponseDto'
